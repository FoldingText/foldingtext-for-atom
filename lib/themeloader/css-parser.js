module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          peg$FAILED,
          [],
          function(stylesheet) { return stylesheet; },
          null,
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          function(charset, imports, rules) {
                return {
                  type:    "StyleSheet",
                  charset: extractOptional(charset, 1),
                  imports: extractList(imports, 0),
                  rules:   extractList(rules, 0)
                };
              },
          function(href, media) {
                return {
                  type:  "ImportRule",
                  href:  href,
                  media: media !== null ? media : []
                };
              },
          "{",
          { type: "literal", value: "{", description: "\"{\"" },
          "}",
          { type: "literal", value: "}", description: "\"}\"" },
          function(media, rules) {
                return {
                  type: "MediaRule",
                  media: media,
                  rules: rules
                };
              },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          function(first, rest) { return buildList(first, rest, 2); },
          function(name) { return name; },
          function(selector, declarationsFirst, declarationsRest) {
                return {
                  type:         "PageRule",
                  selector:     selector,
                  declarations: buildList(declarationsFirst, declarationsRest, 2)
                };
              },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          function(value) { return { type: "PseudoSelector", value: value }; },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          function() { return "/"; },
          function() { return ","; },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          function() { return "+"; },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          function() { return ">"; },
          function(selectorsFirst, selectorsRest, declarationsFirst, declarationsRest) {
                return {
                  type:         "RuleSet",
                  selectors:    buildList(selectorsFirst, selectorsRest, 2),
                  declarations: buildList(declarationsFirst, declarationsRest, 2)
                };
              },
          function(left, combinator, right) {
                return {
                  type:       "Selector",
                  combinator: combinator,
                  left:       left,
                  right:      right
                };
              },
          function(left, right) {
                return {
                  type:       "Selector",
                  combinator: " ",
                  left:       left,
                  right:      right
                };
              },
          function(selector) { return selector; },
          function(element, qualifiers) {
                return {
                  type:       "SimpleSelector",
                  element:    element,
                  qualifiers: qualifiers
                };
              },
          function(qualifiers) {
                return {
                  type:       "SimpleSelector",
                  element:    "*",
                  qualifiers: qualifiers
                };
              },
          function(id) { return { type: "IDSelector", id: id }; },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          function(class_) { return { type: "ClassSelector", class: class_ }; },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          function(attribute, operatorAndValue) {
                return {
                  type:      "AttributeSelector",
                  attribute: attribute,
                  operator:  extractOptional(operatorAndValue, 0),
                  value:     extractOptional(operatorAndValue, 2)
                };
              },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          function(name, params) {
                    return {
                      type:   "Function",
                      name:   name,
                      params: params !== null ? [params[0]] : []
                    };
                  },
          function(name, value, prio) {
                return {
                  type:      "Declaration",
                  name:      name,
                  value:     value,
                  important: prio !== null
                };
              },
          function(first, rest) { return buildExpression(first, rest); },
          function(quantity) {
                return {
                  type:  "Quantity",
                  value: quantity.value,
                  unit:  quantity.unit
                };
              },
          function(value) { return { type: "String", value: value }; },
          function(value) { return { type: "URI",    value: value }; },
          function(value) { return { type: "Ident",  value: value }; },
          function(name, params) {
                return { type: "Function", name: name, params: params };
              },
          function(value) { return { type: "Hexcolor", value: value }; },
          /^[0-9a-f]/i,
          { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
          /^[\x80-\uFFFF]/,
          { type: "class", value: "[\\x80-\\uFFFF]", description: "[\\x80-\\uFFFF]" },
          "\\",
          { type: "literal", value: "\\", description: "\"\\\\\"" },
          "\r\n",
          { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
          /^[ \t\r\n\f]/,
          { type: "class", value: "[ \\t\\r\\n\\f]", description: "[ \\t\\r\\n\\f]" },
          function(digits) {
                return String.fromCharCode(parseInt(digits, 16));
              },
          /^[^\r\n\f0-9a-f]/i,
          { type: "class", value: "[^\\r\\n\\f0-9a-f]i", description: "[^\\r\\n\\f0-9a-f]i" },
          function(ch) { return ch; },
          /^[_a-z]/i,
          { type: "class", value: "[_a-z]i", description: "[_a-z]i" },
          /^[_a-z0-9\-]/i,
          { type: "class", value: "[_a-z0-9\\-]i", description: "[_a-z0-9\\-]i" },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          /^[^\n\r\f\\"]/,
          { type: "class", value: "[^\\n\\r\\f\\\\\"]", description: "[^\\n\\r\\f\\\\\"]" },
          function(nl) { return ""; },
          function(chars) {
                return chars.join("");
              },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          /^[^\n\r\f\\']/,
          { type: "class", value: "[^\\n\\r\\f\\\\']", description: "[^\\n\\r\\f\\\\']" },
          "/*",
          { type: "literal", value: "/*", description: "\"/*\"" },
          /^[^*]/,
          { type: "class", value: "[^*]", description: "[^*]" },
          /^[^\/*]/,
          { type: "class", value: "[^\\/*]", description: "[^\\/*]" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          function(prefix, start, chars) {
                return prefix + start + chars.join("");
              },
          function(chars) { return chars.join(""); },
          /^[+\-]/,
          { type: "class", value: "[+\\-]", description: "[+\\-]" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          "e",
          { type: "literal", value: "e", description: "\"e\"" },
          function() {
                return parseFloat(text());
              },
          /^[!#$%&*-[\]-~]/,
          { type: "class", value: "[!#$%&*-[\\]-~]", description: "[!#$%&*-[\\]-~]" },
          "\n",
          { type: "literal", value: "\n", description: "\"\\n\"" },
          "\r",
          { type: "literal", value: "\r", description: "\"\\r\"" },
          "\f",
          { type: "literal", value: "\f", description: "\"\\f\"" },
          "a",
          { type: "literal", value: "a", description: "\"a\"" },
          "0",
          { type: "literal", value: "0", description: "\"0\"" },
          /^[Aa]/,
          { type: "class", value: "[Aa]", description: "[Aa]" },
          function() { return "a"; },
          "c",
          { type: "literal", value: "c", description: "\"c\"" },
          /^[Cc]/,
          { type: "class", value: "[Cc]", description: "[Cc]" },
          function() { return "c"; },
          "d",
          { type: "literal", value: "d", description: "\"d\"" },
          /^[Dd]/,
          { type: "class", value: "[Dd]", description: "[Dd]" },
          function() { return "d"; },
          /^[Ee]/,
          { type: "class", value: "[Ee]", description: "[Ee]" },
          function() { return "e"; },
          "g",
          { type: "literal", value: "g", description: "\"g\"" },
          /^[Gg]/,
          { type: "class", value: "[Gg]", description: "[Gg]" },
          "\\g",
          { type: "literal", value: "\\g", description: "\"\\\\g\"" },
          function() { return "g"; },
          "h",
          { type: "literal", value: "h", description: "\"h\"" },
          /^[Hh]/,
          { type: "class", value: "[Hh]", description: "[Hh]" },
          "\\h",
          { type: "literal", value: "\\h", description: "\"\\\\h\"" },
          function() { return "h"; },
          "i",
          { type: "literal", value: "i", description: "\"i\"" },
          /^[Ii]/,
          { type: "class", value: "[Ii]", description: "[Ii]" },
          "\\i",
          { type: "literal", value: "\\i", description: "\"\\\\i\"" },
          function() { return "i"; },
          "k",
          { type: "literal", value: "k", description: "\"k\"" },
          /^[Kk]/,
          { type: "class", value: "[Kk]", description: "[Kk]" },
          "\\k",
          { type: "literal", value: "\\k", description: "\"\\\\k\"" },
          function() { return "k"; },
          "l",
          { type: "literal", value: "l", description: "\"l\"" },
          /^[Ll]/,
          { type: "class", value: "[Ll]", description: "[Ll]" },
          "\\l",
          { type: "literal", value: "\\l", description: "\"\\\\l\"" },
          function() { return "l"; },
          "m",
          { type: "literal", value: "m", description: "\"m\"" },
          /^[Mm]/,
          { type: "class", value: "[Mm]", description: "[Mm]" },
          "\\m",
          { type: "literal", value: "\\m", description: "\"\\\\m\"" },
          function() { return "m"; },
          "n",
          { type: "literal", value: "n", description: "\"n\"" },
          /^[Nn]/,
          { type: "class", value: "[Nn]", description: "[Nn]" },
          "\\n",
          { type: "literal", value: "\\n", description: "\"\\\\n\"" },
          function() { return "n"; },
          "o",
          { type: "literal", value: "o", description: "\"o\"" },
          /^[Oo]/,
          { type: "class", value: "[Oo]", description: "[Oo]" },
          "\\o",
          { type: "literal", value: "\\o", description: "\"\\\\o\"" },
          function() { return "o"; },
          "p",
          { type: "literal", value: "p", description: "\"p\"" },
          /^[Pp]/,
          { type: "class", value: "[Pp]", description: "[Pp]" },
          "\\p",
          { type: "literal", value: "\\p", description: "\"\\\\p\"" },
          function() { return "p"; },
          "r",
          { type: "literal", value: "r", description: "\"r\"" },
          /^[Rr]/,
          { type: "class", value: "[Rr]", description: "[Rr]" },
          "\\r",
          { type: "literal", value: "\\r", description: "\"\\\\r\"" },
          function() { return "r"; },
          "s",
          { type: "literal", value: "s", description: "\"s\"" },
          /^[Ss]/,
          { type: "class", value: "[Ss]", description: "[Ss]" },
          "\\s",
          { type: "literal", value: "\\s", description: "\"\\\\s\"" },
          function() { return "s"; },
          "t",
          { type: "literal", value: "t", description: "\"t\"" },
          /^[Tt]/,
          { type: "class", value: "[Tt]", description: "[Tt]" },
          "\\t",
          { type: "literal", value: "\\t", description: "\"\\\\t\"" },
          function() { return "t"; },
          "u",
          { type: "literal", value: "u", description: "\"u\"" },
          /^[Uu]/,
          { type: "class", value: "[Uu]", description: "[Uu]" },
          "\\u",
          { type: "literal", value: "\\u", description: "\"\\\\u\"" },
          function() { return "u"; },
          "x",
          { type: "literal", value: "x", description: "\"x\"" },
          /^[Xx]/,
          { type: "class", value: "[Xx]", description: "[Xx]" },
          "\\x",
          { type: "literal", value: "\\x", description: "\"\\\\x\"" },
          function() { return "x"; },
          "z",
          { type: "literal", value: "z", description: "\"z\"" },
          /^[Zz]/,
          { type: "class", value: "[Zz]", description: "[Zz]" },
          "\\z",
          { type: "literal", value: "\\z", description: "\"\\\\z\"" },
          function() { return "z"; },
          { type: "other", description: "whitespace" },
          { type: "other", description: "<!--" },
          "<!--",
          { type: "literal", value: "<!--", description: "\"<!--\"" },
          { type: "other", description: "-->" },
          "-->",
          { type: "literal", value: "-->", description: "\"-->\"" },
          { type: "other", description: "~=" },
          "~=",
          { type: "literal", value: "~=", description: "\"~=\"" },
          { type: "other", description: "|=" },
          "|=",
          { type: "literal", value: "|=", description: "\"|=\"" },
          { type: "other", description: "string" },
          function(string) { return string; },
          { type: "other", description: "identifier" },
          function(ident) { return ident; },
          { type: "other", description: "hash" },
          "#",
          { type: "literal", value: "#", description: "\"#\"" },
          function(name) { return "#" + name; },
          { type: "other", description: "@import" },
          "@",
          { type: "literal", value: "@", description: "\"@\"" },
          { type: "other", description: "@page" },
          { type: "other", description: "@media" },
          { type: "other", description: "@charset" },
          "@charset ",
          { type: "literal", value: "@charset ", description: "\"@charset \"" },
          { type: "other", description: "!important" },
          "!",
          { type: "literal", value: "!", description: "\"!\"" },
          { type: "other", description: "length" },
          function(value) { return { value: value, unit: "em" }; },
          function(value) { return { value: value, unit: "ex" }; },
          function(value) { return { value: value, unit: "px" }; },
          function(value) { return { value: value, unit: "cm" }; },
          function(value) { return { value: value, unit: "mm" }; },
          function(value) { return { value: value, unit: "in" }; },
          function(value) { return { value: value, unit: "pt" }; },
          function(value) { return { value: value, unit: "pc" }; },
          { type: "other", description: "angle" },
          function(value) { return { value: value, unit: "deg"  }; },
          function(value) { return { value: value, unit: "rad"  }; },
          function(value) { return { value: value, unit: "grad" }; },
          { type: "other", description: "time" },
          function(value) { return { value: value, unit: "ms" }; },
          function(value) { return { value: value, unit: "s"  }; },
          { type: "other", description: "frequency" },
          function(value) { return { value: value, unit: "hz" }; },
          function(value) { return { value: value, unit: "kh" }; },
          { type: "other", description: "percentage" },
          "%",
          { type: "literal", value: "%", description: "\"%\"" },
          function(value) { return { value: value, unit: "%" }; },
          { type: "other", description: "number" },
          function(value) { return { value: value, unit: null }; },
          { type: "other", description: "uri" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          function(url) { return url; },
          { type: "other", description: "function" }
        ],

        peg$bytecode = [
          peg$decode("!7!+:$ !7A,#&7A\"+(%4\"6\"\"!!%$\"#  \"#  "),
          peg$decode("!!7h+=$7b+3%.$\"\"2$3%+#%'#%$##  $\"#  \"#  *# \" #+\u0304$ !7]*) \"7^*# \"7_,/&7]*) \"7^*# \"7_\"+\u02DA% !!7\"+\xB5$ !!7^+5$ !7],#&7]\"+#%'\"%$\"#  \"#  *@ \"!7_+5$ !7],#&7]\"+#%'\"%$\"#  \"#  ,c&!7^+5$ !7],#&7]\"+#%'\"%$\"#  \"#  *@ \"!7_+5$ !7],#&7]\"+#%'\"%$\"#  \"#  \"+#%'\"%$\"#  \"#  ,\xC0&!7\"+\xB5$ !!7^+5$ !7],#&7]\"+#%'\"%$\"#  \"#  *@ \"!7_+5$ !7],#&7]\"+#%'\"%$\"#  \"#  ,c&!7^+5$ !7],#&7]\"+#%'\"%$\"#  \"#  *@ \"!7_+5$ !7],#&7]\"+#%'\"%$\"#  \"#  \"+#%'\"%$\"#  \"#  \"+\u018E% !!7+*) \"7#*# \"7&+\xB5$ !!7^+5$ !7],#&7]\"+#%'\"%$\"#  \"#  *@ \"!7_+5$ !7],#&7]\"+#%'\"%$\"#  \"#  ,c&!7^+5$ !7],#&7]\"+#%'\"%$\"#  \"#  *@ \"!7_+5$ !7],#&7]\"+#%'\"%$\"#  \"#  \"+#%'\"%$\"#  \"#  ,\xCC&!7+*) \"7#*# \"7&+\xB5$ !!7^+5$ !7],#&7]\"+#%'\"%$\"#  \"#  *@ \"!7_+5$ !7],#&7]\"+#%'\"%$\"#  \"#  ,c&!7^+5$ !7],#&7]\"+#%'\"%$\"#  \"#  *@ \"!7_+5$ !7],#&7]\"+#%'\"%$\"#  \"#  \"+#%'\"%$\"#  \"#  \"+*%4$6&$##! %$$#  $##  $\"#  \"#  "),
          peg$decode("!7e+\x8F$ !7],#&7]\"+}%7b*# \"7r+m% !7],#&7]\"+[%7$*# \" #+K%.$\"\"2$3%+;% !7],#&7]\"+)%4'6''\"$\"%$'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7g+\x9B$ !7],#&7]\"+\x89%7$+%.(\"\"2(3)+o% !7],#&7]\"+]% !7+,#&7+\"+K%.*\"\"2*3++;% !7],#&7]\"+)%4(6,(\"%\"%$(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7%+\x95$ !!.-\"\"2-3.+?$ !7],#&7]\"+-%7%+#%'#%$##  $\"#  \"#  ,P&!.-\"\"2-3.+?$ !7],#&7]\"+-%7%+#%'#%$##  $\"#  \"#  \"+)%4\"6/\"\"! %$\"#  \"#  "),
          peg$decode("!7c+:$ !7],#&7]\"+(%4\"60\"!!%$\"#  \"#  "),
          peg$decode("!7f+\u0118$ !7],#&7]\"+\u0106%7'*# \" #+\xF6%.(\"\"2(3)+\xE6% !7],#&7]\"+\xD4%73*# \" #+\xC4% !!.$\"\"2$3%+E$ !7],#&7]\"+3%73*# \" #+#%'#%$##  $\"#  \"#  ,V&!.$\"\"2$3%+E$ !7],#&7]\"+3%73*# \" #+#%'#%$##  $\"#  \"#  \"+L%.*\"\"2*3++<% !7],#&7]\"+*%4)61)#&#\"%$)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!.2\"\"2233+D$7c+:% !7],#&7]\"+(%4#64#!!%$##  $\"#  \"#  "),
          peg$decode("!.5\"\"2536+9$ !7],#&7]\"+'%4\"67\" %$\"#  \"#  *J \"!.-\"\"2-3.+9$ !7],#&7]\"+'%4\"68\" %$\"#  \"#  "),
          peg$decode("!.9\"\"293:+9$ !7],#&7]\"+'%4\"6;\" %$\"#  \"#  *J \"!.<\"\"2<3=+9$ !7],#&7]\"+'%4\"6>\" %$\"#  \"#  "),
          peg$decode("!7c+:$ !7],#&7]\"+(%4\"60\"!!%$\"#  \"#  "),
          peg$decode("!7,+\u0163$ !!.-\"\"2-3.+?$ !7],#&7]\"+-%7,+#%'#%$##  $\"#  \"#  ,P&!.-\"\"2-3.+?$ !7],#&7]\"+-%7,+#%'#%$##  $\"#  \"#  \"+\xF7%.(\"\"2(3)+\xE7% !7],#&7]\"+\xD5%73*# \" #+\xC5% !!.$\"\"2$3%+E$ !7],#&7]\"+3%73*# \" #+#%'#%$##  $\"#  \"#  ,V&!.$\"\"2$3%+E$ !7],#&7]\"+3%73*# \" #+#%'#%$##  $\"#  \"#  \"+M%.*\"\"2*3++=% !7],#&7]\"++%4(6?($'&#\"%$(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7-+P$ !7],#&7]\"+>%7)+4%7,+*%4$6@$##! %$$#  $##  $\"#  \"#  * \"!7-+L$ !7]+&$,#&7]\"\"\"  +3%7,+)%4#6A#\"\" %$##  $\"#  \"#  *E \"!7-+:$ !7],#&7]\"+(%4\"6B\"!!%$\"#  \"#  "),
          peg$decode("!70+_$ !7.*/ \"7/*) \"71*# \"72,5&7.*/ \"7/*) \"71*# \"72\"+)%4\"6C\"\"! %$\"#  \"#  *b \"! !7.*/ \"7/*) \"71*# \"72+8$,5&7.*/ \"7/*) \"71*# \"72\"\"\"  +' 4!6D!! %"),
          peg$decode("!7d+' 4!6E!! %"),
          peg$decode("!.F\"\"2F3G+2$7c+(%4\"6H\"! %$\"#  \"#  "),
          peg$decode("7c*) \".I\"\"2I3J"),
          peg$decode("!.K\"\"2K3L+\xC8$ !7],#&7]\"+\xB6%7c+\xAC% !7],#&7]\"+\x9A%!.M\"\"2M3N*) \"7`*# \"7a+W$ !7],#&7]\"+E%7c*# \"7b+5% !7],#&7]\"+#%'$%$$#  $##  $\"#  \"#  *# \" #+9%.O\"\"2O3P+)%4&6Q&\"#!%$&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!.2\"\"2233+\x98$!7s+x$ !7],#&7]\"+f%!7c+5$ !7],#&7]\"+#%'\"%$\"#  \"#  *# \" #+9%.R\"\"2R3S+)%4$6T$\"#!%$$#  $##  $\"#  \"#  *# \"7c+(%4\"64\"! %$\"#  \"#  "),
          peg$decode("!7*+f$.2\"\"2233+V% !7],#&7]\"+D%75+:%74*# \" #+*%4%6U%#$! %$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7i+5$ !7],#&7]\"+#%'\"%$\"#  \"#  "),
          peg$decode("!76+q$ !!7(*# \" #+-$76+#%'\"%$\"#  \"#  ,>&!7(*# \" #+-$76+#%'\"%$\"#  \"#  \"+)%4\"6V\"\"! %$\"#  \"#  "),
          peg$decode("!7p*G \"7l*A \"7j*; \"7k*5 \"7m*/ \"7n*) \"7o*# \"7q+:$ !7],#&7]\"+(%4\"6W\"!!%$\"#  \"#  *\xA1 \"!7b+:$ !7],#&7]\"+(%4\"6X\"!!%$\"#  \"#  *y \"!7r+:$ !7],#&7]\"+(%4\"6Y\"!!%$\"#  \"#  *Q \"77*K \"78*E \"!7c+:$ !7],#&7]\"+(%4\"6Z\"!!%$\"#  \"#  "),
          peg$decode("!7s+g$ !7],#&7]\"+U%75+K%.R\"\"2R3S+;% !7],#&7]\"+)%4%6[%\"$\"%$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7d+:$ !7],#&7]\"+(%4\"6\\\"!!%$\"#  \"#  "),
          peg$decode("0]\"\"1!3^"),
          peg$decode("0_\"\"1!3`"),
          peg$decode("!.a\"\"2a3b+\xB5$!!79+s$79*# \" #+c%79*# \" #+S%79*# \" #+C%79*# \" #+3%79*# \" #+#%'&%$&#  $%#  $$#  $##  $\"#  \"#  +! (%+J%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+(%4#6g#!!%$##  $\"#  \"#  "),
          peg$decode("7;*I \"!.a\"\"2a3b+8$0h\"\"1!3i+(%4\"6j\"! %$\"#  \"#  "),
          peg$decode("0k\"\"1!3l*) \"7:*# \"7<"),
          peg$decode("0m\"\"1!3n*) \"7:*# \"7<"),
          peg$decode("!.o\"\"2o3p+\xAE$ !0q\"\"1!3r*I \"!.a\"\"2a3b+2$7I+(%4\"6s\"! %$\"#  \"#  *# \"7<,U&0q\"\"1!3r*I \"!.a\"\"2a3b+2$7I+(%4\"6s\"! %$\"#  \"#  *# \"7<\"+8%.o\"\"2o3p+(%4#6t#!!%$##  $\"#  \"#  "),
          peg$decode("!.u\"\"2u3v+\xAE$ !0w\"\"1!3x*I \"!.a\"\"2a3b+2$7I+(%4\"6s\"! %$\"#  \"#  *# \"7<,U&0w\"\"1!3x*I \"!.a\"\"2a3b+2$7I+(%4\"6s\"! %$\"#  \"#  *# \"7<\"+8%.u\"\"2u3v+(%4#6t#!!%$##  $\"#  \"#  "),
          peg$decode("!.y\"\"2y3z+\u0130$ !0{\"\"1!3|,)&0{\"\"1!3|\"+\u0112% !.I\"\"2I3J+,$,)&.I\"\"2I3J\"\"\"  +\xED% !!0}\"\"1!3~+f$ !0{\"\"1!3|,)&0{\"\"1!3|\"+H% !.I\"\"2I3J+,$,)&.I\"\"2I3J\"\"\"  +#%'#%$##  $\"#  \"#  ,w&!0}\"\"1!3~+f$ !0{\"\"1!3|,)&0{\"\"1!3|\"+H% !.I\"\"2I3J+,$,)&.I\"\"2I3J\"\"\"  +#%'#%$##  $\"#  \"#  \"+3%.5\"\"2536+#%'%%$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!!.\"\"23\x80*# \" #+! (%+F$7=+<% !7>,#&7>\"+*%4#6\x81##\"! %$##  $\"#  \"#  "),
          peg$decode("! !7>+&$,#&7>\"\"\"  +' 4!6\x82!! %"),
          peg$decode("!0\x83\"\"1!3\x84*# \" #+\u0102$ !0\x85\"\"1!3\x86+,$,)&0\x85\"\"1!3\x86\"\"\"  *w \"! !0\x85\"\"1!3\x86,)&0\x85\"\"1!3\x86\"+X$.F\"\"2F3G+H% !0\x85\"\"1!3\x86+,$,)&0\x85\"\"1!3\x86\"\"\"  +#%'#%$##  $\"#  \"#  +\x83%!.\x87\"\"2\x873\x88+^$0\x83\"\"1!3\x84*# \" #+H% !0\x85\"\"1!3\x86+,$,)&0\x85\"\"1!3\x86\"\"\"  +#%'#%$##  $\"#  \"#  *# \" #+'%4#6\x89# %$##  $\"#  \"#  "),
          peg$decode("7?*# \"7@"),
          peg$decode("! !0\x8A\"\"1!3\x8B*) \"7:*# \"7<,5&0\x8A\"\"1!3\x8B*) \"7:*# \"7<\"+' 4!6\x82!! %"),
          peg$decode(" !0e\"\"1!3f+,$,)&0e\"\"1!3f\"\"\"  "),
          peg$decode("7G*# \" #"),
          peg$decode(".\x8C\"\"2\x8C3\x8D*A \".c\"\"2c3d*5 \".\x8E\"\"2\x8E3\x8F*) \".\x90\"\"2\x903\x91"),
          peg$decode("/\x92\"\"1!3\x93*\xC2 \"!.a\"\"2a3b+\xB1$.\x94\"\"2\x943\x95*# \" #+\x9B%.\x94\"\"2\x943\x95*# \" #+\x85%.\x94\"\"2\x943\x95*# \" #+o%.\x94\"\"2\x943\x95*# \" #+Y%0\x96\"\"1!3\x97+I%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+'%4'6\x98' %$'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("/\x99\"\"1!3\x9A*\xC2 \"!.a\"\"2a3b+\xB1$.\x94\"\"2\x943\x95*# \" #+\x9B%.\x94\"\"2\x943\x95*# \" #+\x85%.\x94\"\"2\x943\x95*# \" #+o%.\x94\"\"2\x943\x95*# \" #+Y%0\x9B\"\"1!3\x9C+I%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+'%4'6\x9D' %$'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("/\x9E\"\"1!3\x9F*\xC2 \"!.a\"\"2a3b+\xB1$.\x94\"\"2\x943\x95*# \" #+\x9B%.\x94\"\"2\x943\x95*# \" #+\x85%.\x94\"\"2\x943\x95*# \" #+o%.\x94\"\"2\x943\x95*# \" #+Y%0\xA0\"\"1!3\xA1+I%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+'%4'6\xA2' %$'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("/\x87\"\"1!3\x88*\xC2 \"!.a\"\"2a3b+\xB1$.\x94\"\"2\x943\x95*# \" #+\x9B%.\x94\"\"2\x943\x95*# \" #+\x85%.\x94\"\"2\x943\x95*# \" #+o%.\x94\"\"2\x943\x95*# \" #+Y%0\xA3\"\"1!3\xA4+I%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+'%4'6\xA5' %$'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("/\xA6\"\"1!3\xA7*\xD5 \"!.a\"\"2a3b+\xAD$.\x94\"\"2\x943\x95*# \" #+\x97%.\x94\"\"2\x943\x95*# \" #+\x81%.\x94\"\"2\x943\x95*# \" #+k%.\x94\"\"2\x943\x95*# \" #+U%0\xA8\"\"1!3\xA9+E%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *4 \"!/\xAA\"\"1\"3\xAB+& 4!6\xAC! %"),
          peg$decode("/\xAD\"\"1!3\xAE*\xD5 \"!.a\"\"2a3b+\xAD$.\x94\"\"2\x943\x95*# \" #+\x97%.\x94\"\"2\x943\x95*# \" #+\x81%.\x94\"\"2\x943\x95*# \" #+k%.\x94\"\"2\x943\x95*# \" #+U%0\xAF\"\"1!3\xB0+E%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *4 \"!/\xB1\"\"1\"3\xB2+& 4!6\xB3! %"),
          peg$decode("/\xB4\"\"1!3\xB5*\xD5 \"!.a\"\"2a3b+\xAD$.\x94\"\"2\x943\x95*# \" #+\x97%.\x94\"\"2\x943\x95*# \" #+\x81%.\x94\"\"2\x943\x95*# \" #+k%.\x94\"\"2\x943\x95*# \" #+U%0\xB6\"\"1!3\xB7+E%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *4 \"!/\xB8\"\"1\"3\xB9+& 4!6\xBA! %"),
          peg$decode("/\xBB\"\"1!3\xBC*\xD5 \"!.a\"\"2a3b+\xAD$.\x94\"\"2\x943\x95*# \" #+\x97%.\x94\"\"2\x943\x95*# \" #+\x81%.\x94\"\"2\x943\x95*# \" #+k%.\x94\"\"2\x943\x95*# \" #+U%0\xBD\"\"1!3\xBE+E%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *4 \"!/\xBF\"\"1\"3\xC0+& 4!6\xC1! %"),
          peg$decode("/\xC2\"\"1!3\xC3*\xD5 \"!.a\"\"2a3b+\xAD$.\x94\"\"2\x943\x95*# \" #+\x97%.\x94\"\"2\x943\x95*# \" #+\x81%.\x94\"\"2\x943\x95*# \" #+k%.\x94\"\"2\x943\x95*# \" #+U%0\xC4\"\"1!3\xC5+E%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *4 \"!/\xC6\"\"1\"3\xC7+& 4!6\xC8! %"),
          peg$decode("/\xC9\"\"1!3\xCA*\xD5 \"!.a\"\"2a3b+\xAD$.\x94\"\"2\x943\x95*# \" #+\x97%.\x94\"\"2\x943\x95*# \" #+\x81%.\x94\"\"2\x943\x95*# \" #+k%.\x94\"\"2\x943\x95*# \" #+U%0\xCB\"\"1!3\xCC+E%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *4 \"!/\xCD\"\"1\"3\xCE+& 4!6\xCF! %"),
          peg$decode("/\xD0\"\"1!3\xD1*\xD5 \"!.a\"\"2a3b+\xAD$.\x94\"\"2\x943\x95*# \" #+\x97%.\x94\"\"2\x943\x95*# \" #+\x81%.\x94\"\"2\x943\x95*# \" #+k%.\x94\"\"2\x943\x95*# \" #+U%0\xD2\"\"1!3\xD3+E%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *4 \"!/\xD4\"\"1\"3\xD5+& 4!6\xD6! %"),
          peg$decode("/\xD7\"\"1!3\xD8*\xD5 \"!.a\"\"2a3b+\xAD$.\x94\"\"2\x943\x95*# \" #+\x97%.\x94\"\"2\x943\x95*# \" #+\x81%.\x94\"\"2\x943\x95*# \" #+k%.\x94\"\"2\x943\x95*# \" #+U%0\xD9\"\"1!3\xDA+E%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *4 \"!/\xDB\"\"1\"3\xDC+& 4!6\xDD! %"),
          peg$decode("/\xDE\"\"1!3\xDF*\xD5 \"!.a\"\"2a3b+\xAD$.\x94\"\"2\x943\x95*# \" #+\x97%.\x94\"\"2\x943\x95*# \" #+\x81%.\x94\"\"2\x943\x95*# \" #+k%.\x94\"\"2\x943\x95*# \" #+U%0\xE0\"\"1!3\xE1+E%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *4 \"!/\xE2\"\"1\"3\xE3+& 4!6\xE4! %"),
          peg$decode("/\xE5\"\"1!3\xE6*\xD5 \"!.a\"\"2a3b+\xAD$.\x94\"\"2\x943\x95*# \" #+\x97%.\x94\"\"2\x943\x95*# \" #+\x81%.\x94\"\"2\x943\x95*# \" #+k%.\x94\"\"2\x943\x95*# \" #+U%0\xE7\"\"1!3\xE8+E%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *4 \"!/\xE9\"\"1\"3\xEA+& 4!6\xEB! %"),
          peg$decode("/\xEC\"\"1!3\xED*\xD5 \"!.a\"\"2a3b+\xAD$.\x94\"\"2\x943\x95*# \" #+\x97%.\x94\"\"2\x943\x95*# \" #+\x81%.\x94\"\"2\x943\x95*# \" #+k%.\x94\"\"2\x943\x95*# \" #+U%0\xEE\"\"1!3\xEF+E%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *4 \"!/\xF0\"\"1\"3\xF1+& 4!6\xF2! %"),
          peg$decode("/\xF3\"\"1!3\xF4*\xD5 \"!.a\"\"2a3b+\xAD$.\x94\"\"2\x943\x95*# \" #+\x97%.\x94\"\"2\x943\x95*# \" #+\x81%.\x94\"\"2\x943\x95*# \" #+k%.\x94\"\"2\x943\x95*# \" #+U%0\xF5\"\"1!3\xF6+E%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *4 \"!/\xF7\"\"1\"3\xF8+& 4!6\xF9! %"),
          peg$decode("/\xFA\"\"1!3\xFB*\xD5 \"!.a\"\"2a3b+\xAD$.\x94\"\"2\x943\x95*# \" #+\x97%.\x94\"\"2\x943\x95*# \" #+\x81%.\x94\"\"2\x943\x95*# \" #+k%.\x94\"\"2\x943\x95*# \" #+U%0\xFC\"\"1!3\xFD+E%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *4 \"!/\xFE\"\"1\"3\xFF+& 4!6\u0100! %"),
          peg$decode("/\u0101\"\"1!3\u0102*\xD5 \"!.a\"\"2a3b+\xAD$.\x94\"\"2\x943\x95*# \" #+\x97%.\x94\"\"2\x943\x95*# \" #+\x81%.\x94\"\"2\x943\x95*# \" #+k%.\x94\"\"2\x943\x95*# \" #+U%0\u0103\"\"1!3\u0104+E%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *4 \"!/\u0105\"\"1\"3\u0106+& 4!6\u0107! %"),
          peg$decode("/\u0108\"\"1!3\u0109*\xD5 \"!.a\"\"2a3b+\xAD$.\x94\"\"2\x943\x95*# \" #+\x97%.\x94\"\"2\x943\x95*# \" #+\x81%.\x94\"\"2\x943\x95*# \" #+k%.\x94\"\"2\x943\x95*# \" #+U%0\u010A\"\"1!3\u010B+E%.c\"\"2c3d*) \"0e\"\"1!3f*# \" #+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *4 \"!/\u010C\"\"1\"3\u010D+& 4!6\u010E! %"),
          peg$decode("8! !7A,#&7A\"+-$7G+#%'\"%$\"#  \"#  9*\" 3\u010F"),
          peg$decode("8! !7A,#&7A\"+3$.\u0111\"\"2\u01113\u0112+#%'\"%$\"#  \"#  9*\" 3\u0110"),
          peg$decode("8! !7A,#&7A\"+3$.\u0114\"\"2\u01143\u0115+#%'\"%$\"#  \"#  9*\" 3\u0113"),
          peg$decode("8! !7A,#&7A\"+3$.\u0117\"\"2\u01173\u0118+#%'\"%$\"#  \"#  9*\" 3\u0116"),
          peg$decode("8! !7A,#&7A\"+3$.\u011A\"\"2\u011A3\u011B+#%'\"%$\"#  \"#  9*\" 3\u0119"),
          peg$decode("8! !7A,#&7A\"+2$7E+(%4\"6\u011D\"! %$\"#  \"#  9*\" 3\u011C"),
          peg$decode("8! !7A,#&7A\"+2$7B+(%4\"6\u011F\"! %$\"#  \"#  9*\" 3\u011E"),
          peg$decode("8! !7A,#&7A\"+B$.\u0121\"\"2\u01213\u0122+2%7C+(%4#6\u0123#! %$##  $\"#  \"#  9*\" 3\u0120"),
          peg$decode("8! !7A,#&7A\"+o$.\u0125\"\"2\u01253\u0126+_%7P+U%7S+K%7V+A%7U+7%7W+-%7Y+#%'(%$(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  9*\" 3\u0124"),
          peg$decode("8! !7A,#&7A\"+[$.\u0125\"\"2\u01253\u0126+K%7V+A%7J+7%7N+-%7M+#%'&%$&#  $%#  $$#  $##  $\"#  \"#  9*\" 3\u0127"),
          peg$decode("8! !7A,#&7A\"+e$.\u0125\"\"2\u01253\u0126+U%7S+K%7M+A%7L+7%7P+-%7J+#%''%$'#  $&#  $%#  $$#  $##  $\"#  \"#  9*\" 3\u0128"),
          peg$decode("8! !7A,#&7A\"+3$.\u012A\"\"2\u012A3\u012B+#%'\"%$\"#  \"#  9*\" 3\u0129"),
          peg$decode("8! !7A,#&7A\"+\xAB$.\u012D\"\"2\u012D3\u012E+\x9B% !7G*# \"7A,)&7G*# \"7A\"+}%7P+s%7S+i%7V+_%7U+U%7W+K%7Y+A%7J+7%7T+-%7Y+#%',%$,#  $+#  $*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  9*\" 3\u012C"),
          peg$decode("8! !7A,#&7A\"+F$7D+<%7M+2%7S+(%4$6\u0130$!\"%$$#  $##  $\"#  \"#  9*\" 3\u012F"),
          peg$decode("8! !7A,#&7A\"+F$7D+<%7M+2%7[+(%4$6\u0131$!\"%$$#  $##  $\"#  \"#  9*\" 3\u012F"),
          peg$decode("8! !7A,#&7A\"+F$7D+<%7V+2%7[+(%4$6\u0132$!\"%$$#  $##  $\"#  \"#  *\u0149 \"! !7A,#&7A\"+F$7D+<%7K+2%7S+(%4$6\u0133$!\"%$$#  $##  $\"#  \"#  *\u010D \"! !7A,#&7A\"+F$7D+<%7S+2%7S+(%4$6\u0134$!\"%$$#  $##  $\"#  \"#  *\xD1 \"! !7A,#&7A\"+F$7D+<%7P+2%7T+(%4$6\u0135$!\"%$$#  $##  $\"#  \"#  *\x95 \"! !7A,#&7A\"+F$7D+<%7V+2%7Y+(%4$6\u0136$!\"%$$#  $##  $\"#  \"#  *Y \"! !7A,#&7A\"+F$7D+<%7V+2%7K+(%4$6\u0137$!\"%$$#  $##  $\"#  \"#  9*\" 3\u012F"),
          peg$decode("8! !7A,#&7A\"+P$7D+F%7L+<%7M+2%7N+(%4%6\u0139%!#%$%#  $$#  $##  $\"#  \"#  *\xB3 \"! !7A,#&7A\"+P$7D+F%7W+<%7J+2%7L+(%4%6\u013A%!#%$%#  $$#  $##  $\"#  \"#  *m \"! !7A,#&7A\"+Z$7D+P%7N+F%7W+<%7J+2%7L+(%4&6\u013B&!$%$&#  $%#  $$#  $##  $\"#  \"#  9*\" 3\u0138"),
          peg$decode("8! !7A,#&7A\"+F$7D+<%7S+2%7X+(%4$6\u013D$!\"%$$#  $##  $\"#  \"#  *O \"! !7A,#&7A\"+<$7D+2%7X+(%4#6\u013E#!!%$##  $\"#  \"#  9*\" 3\u013C"),
          peg$decode("8! !7A,#&7A\"+F$7D+<%7O+2%7\\+(%4$6\u0140$!\"%$$#  $##  $\"#  \"#  *c \"! !7A,#&7A\"+P$7D+F%7Q+<%7O+2%7\\+(%4%6\u0141%!#%$%#  $$#  $##  $\"#  \"#  9*\" 3\u013F"),
          peg$decode("8! !7A,#&7A\"+B$7D+8%.\u0143\"\"2\u01433\u0144+(%4#6\u0145#!!%$##  $\"#  \"#  9*\" 3\u0142"),
          peg$decode("8! !7A,#&7A\"+2$7D+(%4\"6\u0147\"! %$\"#  \"#  9*\" 3\u0146"),
          peg$decode("8! !7A,#&7A\"+\x84$7Z+z%7W+p%7R+f%/\u0149\"\"1!3\u014A+V%7H+L%7E+B%7H+8%.R\"\"2R3S+(%4)6\u014B)!\"%$)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  *\x97 \"! !7A,#&7A\"+\x84$7Z+z%7W+p%7R+f%/\u0149\"\"1!3\u014A+V%7H+L%7F+B%7H+8%.R\"\"2R3S+(%4)6\u014B)!\"%$)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  9*\" 3\u0148"),
          peg$decode("8! !7A,#&7A\"+B$7B+8%.\u0149\"\"2\u01493\u014A+(%4#60#!!%$##  $\"#  \"#  9*\" 3\u014C")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$cache = {},
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 84 + index,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      function extractOptional(optional, index) {
        return optional ? optional[index] : null;
      }

      function extractList(list, index) {
        var result = [], i;

        for (i = 0; i < list.length; i++) {
          if (list[i][index] !== null) {
            result.push(list[i][index]);
          }
        }

        return result;
      }

      function buildList(first, rest, index) {
        return (first !== null ? [first] : []).concat(extractList(rest, index));
      }

      function buildExpression(first, rest) {
        var result = first, i;

        for (i = 0; i < rest.length; i++) {
          result = {
            type:     "Expression",
            operator: rest[i][0],
            left:     result,
            right:    rest[i][1]
          };
        }

        return result;
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
